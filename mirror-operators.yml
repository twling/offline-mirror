#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: "mirror-content-using-oc-mirror.yml"
  hosts: localhost
  become: false
  vars_files:
    - "imageset_config_files_to_create.yml"
  vars:
      #ansible_python_interpreter: /usr/bin/python3
      rh_pull_secret_file: "./auth.json"
      imageset_config_files_to_create: true
      imageset_config_files_to_create_overwrite: true
      imageset_config_files_dir: "imageset-configs-417/single-operator-configs-417"
      dir_bundle_location: "content-mirror"
      set_custom_catalog_name: "false"
      custom_catalog_prefix: ""
      operator_content_type: "true"
      bundle: "true"

  pre_tasks:
      - name: Ensure required oc-mirror binary is installed on host
        when:
            - not oc_mirror_cli is defined or oc_mirror_cli == ''
        block:
            - name: "ansible.builtin.command:which | Check if oc-mirror is installed"
              ansible.builtin.shell: >
                  which oc-mirror
              ignore_errors: yes
              register: ocmirror_binary

            - name: "set_fact |  oc_mirror_cli"
              ansible.builtin.set_fact:
                  oc_mirror_cli: "{{ ocmirror_binary.stdout }}"
              when:
                  - ocmirror_binary is defined
                  - ocmirror_binary.rc is defined
                  - ocmirror_binary.rc == 0
                  - ocmirror_binary.stdout is defined
                  - ocmirror_binary.stdout != ''

  tasks:
      - name: "Conditionally create imageset config files"
        when:
            (imageset_config_files_to_create is defined and imageset_config_files_to_create is mapping and imageset_config_files_to_create.keys() is defined and imageset_config_files_to_create.keys() | length > 0) or
            (imageset_config_files_to_create_overwrite is defined and imageset_config_files_to_create_overwrite | bool and imageset_config_files_to_create_overwrite is true)
        block:

            - name: "file:directory | Ensure the images staging directory exist"
              ansible.builtin.file:
                path: "{{ imageset_config_files_dir | default('/tmp/operators-imageset-configs', true) }}"
                state: directory
                mode: 0755

            - name: "set_fact |  content_repo"
              ansible.builtin.template:
                src: "templates/imageset-config.yaml.j2"
                dest: "{{ imageset_config_files_dir | default('/tmp/operators-imageset-configs', true) }}/{{ item.key }}-imageset-config.yml"
                force: true
              with_dict: "{{ imageset_config_files_to_create }}"
              loop_control:
                index_var: key_cnt
              when:
                - item.key is defined and item.key != ""
                - item.value.src_index is defined and item.value.src_index != ''
              vars:
                operator_name: "{{ item.key }}"
                operator_channel: "{{ item.value.channel }}"
                cat_src_index: "{{ item.value.src_index }}"
                operator_min_version: "{{ item.value.min_version }}"
                operator_max_version: "{{ item.value.max_version }}"
                cat_target_name: "{{ (custom_catalog_prefix + item.key) if set_custom_catalog_name is defined and set_custom_catalog_name | bool else '' }}"
                cat_target_tag: "{{ custom_catalog_tag if custom_catalog_tag is defined and custom_catalog_tag !='' else item.value.src_index.split(':')[1] if set_custom_catalog_name is defined and set_custom_catalog_name | bool else '' }}"
              register: imageset_config_created

            - name: "Print imageset created files output"
              ansible.builtin.debug:
                var: imageset_config_created.results
                verbosity: 2

            - name: "set_fact imageset files"
              ansible.builtin.set_fact:
                created_imageset_config_files: "{{ imageset_config_created.results | map(attribute='dest') | flatten }}"

            - name: "Print created imageset config files output"
              ansible.builtin.debug:
                var: created_imageset_config_files
                verbosity: 2

            - name: "ansible.builtin.set_fact | set image_set_config_files "
              ansible.builtin.set_fact:
                  imageset_config_files: "{{ created_imageset_config_files }}"

      - name: "Load imageset config files"
        when:
            - imageset_config_files_dir is defined
            - imageset_config_files_dir != ''
            - not imageset_config_files_to_create is defined or (imageset_config_files_to_create.keys() is defined and imageset_config_files_to_create.keys() | length == 0)
            - operator_content_type is defined and operator_content_type | bool
        block:
            - name: "set |  all ISCP files path"
              ansible.builtin.set_fact:
                  imageset_config_files_path: "{{ playbook_dir + '/' + imageset_config_files_dir }}"

            - name: "find |  Find all ISCP files"
              ansible.builtin.find:
                  path: "{{ imageset_config_files_path }}"
                  recurse: no
                  patterns: "*-imageset-config.yml"
              register: icfiles

            - name: "set_fact | ICSP file paths"
              ansible.builtin.set_fact:
                  imageset_config_files: "{{ icfiles.files | map(attribute='path') | list }}"
              when:
                  - icfiles is defined
                  - icfiles.files is defined

      - name: "ansible.builtin.shell | Prcess content mirror within imageset  catalogs config files "
        ansible.builtin.include_tasks: tasks/process-content-mirror-using-oc-mirror.yml
        loop: "{{ imageset_config_files }}"
        vars:
            imageset_config_file: "{{ item }}"
            is_bundle_part: "{{ 'true' if imageset_config_files | length > 1 else 'false' }}"
        register: all_content_mirrored

      - name: "Print Content Mirror output"
        ansible.builtin.debug:
            var: all_content_mirrored.results
            verbosity: 2

      - name: "block | create bundle of single operator bundles"
        when:
            - bundle is defined
            - bundle | bool
            - imageset_config_files | length > 1
        block:
            - name: "archive:xz | create operator image bundle "
              command: >
                  tar -c --use-compress-program='pigz -9' --remove-files -v \
                    -f {{ dir_bundle_location }}/{{ operator_bundle_file_name }} \
                    -C {{ dir_bundle_location }}/bundle .
              args:
                  chdir: "{{ dir_bundle_location }}/bundle/"
